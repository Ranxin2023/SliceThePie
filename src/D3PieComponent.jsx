'use strict'

import React, { useRef, useEffect } from 'react';


/* React Component */
function D3PieComponent(props) {

  // This is the container DOM object that will hold the pie chart. It's an SVG. It is stored in a ref, which is a static variable containing a DOM element.
  const d3Container = useRef(null);

  // The contents of the SVG - the pie chart - are genereated using D3
  // The Effect Hook is a function that is run when the component is updated and the input data changes 
  useEffect(function() {
    console.log("Updating graphical elements");

    // the data comes as input to the component in props.
    let data = props.data;

    // get the total percent of the pie covered
    // I am sure there is a fancier way of doing this
    function addPercent() {
      let total = 0;
      for (let i = 0; i < data.length; i++) {
        total = total + data[i]["value"];
      }
      return total;
    }

    let totalPercent = addPercent();

    // only make graphics if there is a container to attach them to.
    if (d3Container.current && data) {

      // the SVG element that will contain the pie chart
      const svg = d3.select(d3Container.current);

      // size of container 
      let width = svg.attr("width");
      let radius = (width / 2) - 10;

      /* D3 Auto-colors
      let color = d3.scaleOrdinal()
        .domain(data.map(d => d.name))
        .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())
      */

      // colors we pick
      /*
      let newColor = [
        "#69b3a2",
        "#b3a269",
        "#69b3a2",
        "#b3a269",
        "#69b3a2",
        "#b3a269",
        "#69b3a2",
        "#b3a269",
        "#69b3a2",
        "#b3a269",
      ]
    */
    let newColor = [
        "#f0bf00",
        "#f6e50e",
        "#fff688",
        "#5f63ec",
        "#71a8ff",
        "#58c9fb",
        "#0f7ab4",
        "#d4e4ff",
        "#69b3a2",
        "#b3a269",
      ]
      let arc = d3.arc()
        .innerRadius(0)
        .outerRadius((width/2) - 10)

      // No sort, keep the order as given in the array.
      // The percentages do not necessarily fill up the pie, so endAngle is not necessarily 2PI.
      let pie = d3.pie()
        .sort(null)
        .value(d => d.value)
        .startAngle(0)
        .endAngle(totalPercent * 2 * Math.PI / 100);

      // The pie chart is a collection of arcs, generated by the D3 pie function. The pie function joins the data to the arcs. 
      const arcs = pie(data);

      // To show the pie, we append the arcs to the root svg element
      // g for group 
      // translate to center
      // outline with white
      // we'll add paths to the SVG
      // bind to data created in arcs
      // join makes sure number of arcs equals number of data items, even if data array changes
      // color of arc
      // the d-for-draw attribute of the SVG 
      svg.append("g") 
        .attr("transform", "translate(" + width / 2 + "," + width / 2 + ")")
        .attr("stroke", "white")
        .selectAll("path")
        .data(arcs)
        .join("path")
        .attr("fill", (d,i) => newColor[i])
        .attr("d", arc);
    }
  },
    // only update when container node changes or the data changes
    [props.data, d3Container.current]
  ); // useEffect

  // the svg containing the pie chart is the contents of the component.
  return (
    <svg
      className="d3-component"
      width={400}
      height={400}
      ref={d3Container}
    />
  );
}

  export default D3PieComponent;
